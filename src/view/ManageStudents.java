/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.StudentManagementController;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gh
 */
public class ManageStudents extends javax.swing.JFrame {
    private static final String URL = "jdbc:mysql://localhost/lms";
    private static final String USER = "root";
    private static final String PASSWORD = "";
    private Object id = null;
    
    /**
     * Creates new form ManageStudents
     */
    public ManageStudents() {
        initComponents();
        String[] selectedColumns = {"id", "name", "email", "phone"};
        loadTableData("students", studentTable, selectedColumns);
        studentTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        studentTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Ignore the event while the table is updating
                if (!e.getValueIsAdjusting()) {
                    // Get the selected row index
                    int selectedRow = studentTable.getSelectedRow();
                    if (selectedRow != -1) {
                        // Fetch data from the selected row
                        id = studentTable.getValueAt(selectedRow, 0);
                        // Display the selected row data
                        btnUpdate.setEnabled(true);
                        btnRemove.setEnabled(true);
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("LMS | Manage Students");

        btnAdd.setText("Add");

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jScrollPane2.setToolTipText("");

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(studentTable);

        jScrollPane2.setViewportView(jScrollPane1);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRefresh)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnRemove)
                    .addComponent(btnRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        String[] selectedColumns = {"id", "name", "email", "phone"};
        loadTableData("students", studentTable, selectedColumns);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int result = JOptionPane.showConfirmDialog(
                null, 
                "Are you sure you want to Delete selected record?", 
                "Confirmation", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE
        );

        // Check the user's response
        if (result == JOptionPane.YES_OPTION) {
            // Perform the action
            StudentManagementController.deleteUserByStudentId(Integer.parseInt(id.toString()));
            String[] selectedColumns = {"id", "name", "email", "phone"};
            loadTableData("students", studentTable, selectedColumns);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (id == null) {
            return;
        }
        String[] data = StudentManagementController.getStudentDetailsById(Integer.parseInt(id.toString()));
        UpdateStudent updateStudent = new UpdateStudent(id.toString(), data);
        updateStudent.setLocationRelativeTo(null);
        updateStudent.setModal(true);
        updateStudent.setVisible(true);
    }//GEN-LAST:event_btnUpdateActionPerformed

    public static void loadTableData(String tableName, JTable table, String[] selectedColumns) {
        // Use a custom DefaultTableModel to make the table non-editable
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // All cells are non-editable
            }
        };

        table.setModel(model);

        // Clear existing table data
        model.setRowCount(0);
        model.setColumnCount(0);

        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM " + tableName)) {

            // Fetch column metadata
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();

            // Map selected columns to their indices
            List<Integer> columnIndices = new ArrayList<>();
            for (String column : selectedColumns) {
                for (int i = 1; i <= columnCount; i++) {
                    if (metaData.getColumnName(i).equalsIgnoreCase(column)) {
                        columnIndices.add(i);
                        model.addColumn(column);
                        break;
                    }
                }
            }

            // Add rows to the model using only selected columns
            while (rs.next()) {
                Object[] rowData = new Object[columnIndices.size()];
                for (int i = 0; i < columnIndices.size(); i++) {
                    rowData[i] = rs.getObject(columnIndices.get(i));
                }
                model.addRow(rowData);
            }

            // Adjust column widths to fit content
            fitColumnsToContent(table);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to load table data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void fitColumnsToContent(JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            int preferredWidth = 100; // Default minimum width
            for (int row = 0; row < table.getRowCount(); row++) {
                Object value = table.getValueAt(row, column);
                if (value != null) {
                    // Measure the preferred width based on the value
                    int cellWidth = table.getFontMetrics(table.getFont()).stringWidth(value.toString());
                    preferredWidth = Math.max(preferredWidth, cellWidth + 20); // Add padding
                }
            }
            table.getColumnModel().getColumn(column).setPreferredWidth(preferredWidth);
        }
    }
    
    public void addStudentsListener(ActionListener listener) {
        btnAdd.addActionListener(listener);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable studentTable;
    // End of variables declaration//GEN-END:variables
}
